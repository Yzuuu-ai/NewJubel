
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.NotifikasiScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  transaksiId: 'transaksiId',
  tipe: 'tipe',
  judul: 'judul',
  pesan: 'pesan',
  dibaca: 'dibaca',
  dibuatPada: 'dibuatPada'
};

exports.Prisma.ProdukScalarFieldEnum = {
  id: 'id',
  kodeProduk: 'kodeProduk',
  namaGame: 'namaGame',
  deskripsi: 'deskripsi',
  harga: 'harga',
  penjualId: 'penjualId',
  statusJual: 'statusJual',
  gambar: 'gambar',
  judulProduk: 'judulProduk',
  dibuatPada: 'dibuatPada',
  diperbaruiPada: 'diperbaruiPada',
  statusProduk: 'statusProduk',
  hargaEth: 'hargaEth'
};

exports.Prisma.ProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  nama: 'nama',
  nomor_telepon: 'nomor_telepon',
  alamat: 'alamat',
  nomor_whatsapp: 'nomor_whatsapp'
};

exports.Prisma.RiwayattransaksiScalarFieldEnum = {
  id: 'id',
  kodeTransaksi: 'kodeTransaksi',
  namaGame: 'namaGame',
  harga: 'harga',
  walletPenjual: 'walletPenjual',
  walletPembeli: 'walletPembeli',
  tanggalSelesai: 'tanggalSelesai',
  dibuatPada: 'dibuatPada'
};

exports.Prisma.SengketaScalarFieldEnum = {
  id: 'id',
  transaksiId: 'transaksiId',
  deskripsi: 'deskripsi',
  adminNote: 'adminNote',
  dibuatPada: 'dibuatPada',
  disputeType: 'disputeType',
  paymentMethod: 'paymentMethod',
  paymentTxHash: 'paymentTxHash',
  pembeliBukti: 'pembeliBukti',
  penjualBukti: 'penjualBukti',
  resolution: 'resolution',
  resolvedAt: 'resolvedAt',
  status: 'status'
};

exports.Prisma.TransaksiScalarFieldEnum = {
  id: 'id',
  kodeTransaksi: 'kodeTransaksi',
  produkId: 'produkId',
  pembeliId: 'pembeliId',
  penjualId: 'penjualId',
  status: 'status',
  waktuBayar: 'waktuBayar',
  waktuSelesai: 'waktuSelesai',
  contractAddress: 'contractAddress',
  escrowAmount: 'escrowAmount',
  smartContractTxHash: 'smartContractTxHash',
  accountData: 'accountData',
  deskripsiBukti: 'deskripsiBukti',
  adminRefundAt: 'adminRefundAt',
  adminRefundBy: 'adminRefundBy',
  adminRefundNote: 'adminRefundNote',
  adminRefundTxHash: 'adminRefundTxHash',
  adminReleaseAt: 'adminReleaseAt',
  adminReleaseBy: 'adminReleaseBy',
  adminReleaseNote: 'adminReleaseNote',
  adminReleaseTxHash: 'adminReleaseTxHash',
  dibuatPada: 'dibuatPada',
  diperbaruiPada: 'diperbaruiPada',
  escrowId: 'escrowId',
  expiredAt: 'expiredAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  role: 'role',
  walletAddress: 'walletAddress',
  dibuatPada: 'dibuatPada'
};

exports.Prisma.Aplikasi_penjualScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  nomor_telepon: 'nomor_telepon',
  nomor_whatsapp: 'nomor_whatsapp',
  alamat: 'alamat',
  alasan_jual: 'alasan_jual',
  status: 'status',
  catatan_admin: 'catatan_admin',
  diajukan_pada: 'diajukan_pada',
  diperbarui: 'diperbarui'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.notifikasi_tipe = exports.$Enums.notifikasi_tipe = {
  REGISTER: 'REGISTER',
  PEMBAYARAN_DITERIMA: 'PEMBAYARAN_DITERIMA',
  TRANSAKSI_SUKSES: 'TRANSAKSI_SUKSES',
  SENGKETA_DIMULAI: 'SENGKETA_DIMULAI',
  SENGKETA_DIPUTUSKAN: 'SENGKETA_DIPUTUSKAN',
  AKUN_DIKIRIM: 'AKUN_DIKIRIM',
  COUNTDOWN_PEMBAYARAN: 'COUNTDOWN_PEMBAYARAN',
  APLIKASI_PENJUAL_DIAJUKAN: 'APLIKASI_PENJUAL_DIAJUKAN',
  APLIKASI_PENJUAL_DISETUJUI: 'APLIKASI_PENJUAL_DISETUJUI',
  APLIKASI_PENJUAL_DITOLAK: 'APLIKASI_PENJUAL_DITOLAK',
  APLIKASI_PENJUAL_BARU: 'APLIKASI_PENJUAL_BARU'
};

exports.produk_statusProduk = exports.$Enums.produk_statusProduk = {
  AKTIF: 'AKTIF',
  TERJUAL: 'TERJUAL',
  PENDING: 'PENDING',
  DITOLAK: 'DITOLAK',
  DIHAPUS: 'DIHAPUS'
};

exports.sengketa_disputeType = exports.$Enums.sengketa_disputeType = {
  USER_DISPUTE: 'USER_DISPUTE',
  ADMIN_DISPUTE: 'ADMIN_DISPUTE'
};

exports.sengketa_status = exports.$Enums.sengketa_status = {
  DIPROSES: 'DIPROSES',
  DIMENANGKAN_PEMBELI: 'DIMENANGKAN_PEMBELI',
  DIMENANGKAN_PENJUAL: 'DIMENANGKAN_PENJUAL'
};

exports.transaksi_status = exports.$Enums.transaksi_status = {
  MENUNGGU_PEMBAYARAN: 'MENUNGGU_PEMBAYARAN',
  DIBAYAR_SMARTCONTRACT: 'DIBAYAR_SMARTCONTRACT',
  MENUNGGU_KIRIM_AKUN: 'MENUNGGU_KIRIM_AKUN',
  DIKIRIM: 'DIKIRIM',
  DIKONFIRMASI_PEMBELI: 'DIKONFIRMASI_PEMBELI',
  SENGKETA: 'SENGKETA',
  SELESAI: 'SELESAI',
  REFUND: 'REFUND',
  GAGAL: 'GAGAL'
};

exports.user_role = exports.$Enums.user_role = {
  PEMBELI: 'PEMBELI',
  PENJUAL: 'PENJUAL',
  ADMIN: 'ADMIN'
};

exports.status_aplikasi = exports.$Enums.status_aplikasi = {
  MENUNGGU: 'MENUNGGU',
  SEDANG_DIREVIEW: 'SEDANG_DIREVIEW',
  DISETUJUI: 'DISETUJUI',
  DITOLAK: 'DITOLAK'
};

exports.Prisma.ModelName = {
  notifikasi: 'notifikasi',
  produk: 'produk',
  profile: 'profile',
  riwayattransaksi: 'riwayattransaksi',
  sengketa: 'sengketa',
  transaksi: 'transaksi',
  user: 'user',
  aplikasi_penjual: 'aplikasi_penjual'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
